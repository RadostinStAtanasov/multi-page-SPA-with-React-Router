{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Radul\\\\Desktop\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, defer, Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, messag: 'Could not fetch events.' }\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","Suspense","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["C:/Users/Radul/Desktop/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import EventsList from '../components/EventsList';\nimport { useLoaderData , defer, Await} from 'react-router-dom';\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Suspense>\n      <Await resolve={events}>\n        {(loadedEvents) => <EventsList events={loadedEvents}/>}\n      </Await>\n    </Suspense>\n    )\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n      //return { isError: true, messag: 'Could not fetch events.' }\n      throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n        status: 500,\n      });\n    } else {\n      return response;\n    }\n}\n\nexport async function loader() {\n    return defer({\n      events: loadEvents(),\n    })\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAGC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC,CAAC;EAElC,oBACEI,OAAA,CAACI,QAAQ;IAAAC,QAAA,eACPL,OAAA,CAACF,KAAK;MAACQ,OAAO,EAAEH,MAAO;MAAAE,QAAA,EACnBE,YAAY,iBAAKP,OAAA,CAACL,UAAU;QAACQ,MAAM,EAAEI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CAVQD,UAAU;EAAA,QACEL,aAAa;AAAA;AAAAgB,EAAA,GADzBX,UAAU;AAYnB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MACvEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACJ;AAEA,OAAO,eAAeQ,MAAMA,CAAA,EAAG;EAC3B,OAAOzB,KAAK,CAAC;IACXM,MAAM,EAAEU,UAAU,CAAC;EACrB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}